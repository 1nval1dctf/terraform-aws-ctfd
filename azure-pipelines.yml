trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    sudo apt install -y jq
    # Download and unzip Terraform
    LATEST_URL=$(curl https://releases.hashicorp.com/terraform/index.json | jq -r '.versions[].builds[].url | select(.|test("alpha|beta|rc")|not) | select(.|contains("linux_amd64"))' | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | tail -1)
    curl ${LATEST_URL} > /tmp/terraform.zip
    # Unzip and move Terraform to a folder which is in $PATH
    (cd /tmp && unzip /tmp/terraform.zip && chmod +x /tmp/terraform && sudo mv /tmp/terraform /usr/local/bin/)
  displayName: Install Terraform

- script: |
    # Download and unzip tflint
    curl -L "$(curl -Ls https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E "https://.+?_linux_amd64.zip")" -o tflint.zip
    unzip tflint.zip
    # Move tflint to a folder which is in $PATH
    sudo mv tflint /usr/local/bin/
    rm tflint.zip
  displayName: Install tflint

- script: |
    # Download tfsec
    curl -L https://github.com/tfsec/tfsec/releases/download/v0.38.3/tfsec-linux-amd64 > tfsec
    chmod +x tfsec
    # Move tfsec to a folder which is in $PATH
    sudo mv tfsec /usr/local/bin/
  displayName: Install tfsec

- script: make validate
  displayName: 'Validate terraform'

- script: make format
  displayName: 'Ensure terraform format'

- script: make validate_tests
  displayName: 'Validate tests'

- script: make format_tests
  displayName: 'Ensure terraform format for tests'

- script: make validate_examples
  displayName: 'Validate examples'

- script: make format_examples
  displayName: 'Ensure terraform format for examples'

- script: tflint
  displayName: 'Check Terraform configurations with tflint'

- script: tfsec
  displayName: 'Check Terraform configurations with tfsec'